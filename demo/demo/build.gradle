plugins {
    id 'java-library'
    id 'maven-publish'
    id 'org.springframework.boot' version "3.2.6"
    id 'io.spring.dependency-management' version "1.1.0"
    id 'io.freefair.lombok' version "6.6.1"	//플러그인으로 lombok을 쓸 수 있다.
    id 'jacoco'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
description = 'demo'

java.sourceCompatibility = JavaVersion.VERSION_17

repositories {
    mavenLocal()
    maven {
        url = uri('https://repo.maven.apache.org/maven2/')
    }
}

dependencies {
    

	implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.projectlombok:lombok:1.18.32'
    
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.4.0'
    
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'com.google.code.gson:gson:2.10.1'
    
    implementation 'com.github.ulisesbocchio:jasypt-spring-boot-starter:3.0.5'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis:3.2.6'
    implementation 'org.springframework.boot:spring-boot-devtools'
    implementation 'com.mysql:mysql-connector-j:8.0.33'
    
    implementation 'org.springframework.boot:spring-boot-starter'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    
    // jackson
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.15.0'
    implementation 'com.fasterxml.jackson.core:jackson-core:2.15.0'
    implementation 'com.fasterxml.jackson.core:jackson-annotations:2.15.0'
    
    //testImplementation 'org.junit.jupiter:junit-jupiter-engine'
    
}


configurations {
    testRuntime {
        extendsFrom testImplementation
    }
}

test {
	useJUnitPlatform()
	// systemProperties["spring.profiles.active"] = "test"
	finalizedBy jacocoTestReport
}

jacoco {
    toolVersion = "0.8.10"
    // reportsDir = file("$buildDir/customJacocoReportDir")
}

jacocoTestReport {
    
    dependsOn test

    reports {
        xml.required = false
        html.required = true
        csv.required = false
    }
    
    finalizedBy 'jacocoTestCoverageVerification'
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            enabled = true
            element = 'CLASS'

            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.80
            }

            limit {
                counter = 'METHOD'
                value = 'COVEREDRATIO'
                minimum = 0.80
            }
        }
    }
}



tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

tasks.withType(Javadoc) {
    options.encoding = 'UTF-8'
}


task testCoverage(type: Test) {
  group 'verification'
  description 'Runs the unit tests with coverage'

  dependsOn(':test',
            ':jacocoTestReport',
            ':jacocoTestCoverageVerification')

  tasks['jacocoTestReport'].mustRunAfter(tasks['test'])
  tasks['jacocoTestCoverageVerification'].mustRunAfter(tasks['jacocoTestReport'])
  }
